// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Escape Room models
model Room {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String     @db.Text
  shortDesc   String?
  difficulty  String // EASY, MEDIUM, HARD
  duration    Int // w minutach
  minPlayers  Int
  maxPlayers  Int
  price       Float
  images      String[] // array URLi do zdjęć
  isActive    Boolean    @default(true)
  bookings    Booking[]
  timeSlots   TimeSlot[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TimeSlot {
  id        String   @id @default(cuid())
  roomId    String
  date      DateTime @db.Date
  startTime String // np. "10:00"
  endTime   String // np. "11:30"
  isBooked  Boolean  @default(false)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  booking   Booking?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roomId, date, startTime])
}

model Booking {
  id              String   @id @default(cuid())
  userId          String
  roomId          String
  timeSlotId      String   @unique
  playerCount     Int
  totalPrice      Float
  status          String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED, COMPLETED
  stripeSessionId String?  @unique
  customerName    String
  customerEmail   String
  customerPhone   String
  notes           String?  @db.Text
  user            User     @relation(fields: [userId], references: [id])
  room            Room     @relation(fields: [roomId], references: [id])
  timeSlot        TimeSlot @relation(fields: [timeSlotId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
